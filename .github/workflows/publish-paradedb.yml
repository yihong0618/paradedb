# workflows/publish-paradedb.yml
#
# Publish ParadeDB
# Publish ParadeDB as a Docker image to Docker Hub and as a Helm Chart to paradedb.github.io via our
# `paradedb/helm-charts` repository. This workflow only runs after a GitHub Release gets created, which
# happens once we merge to `main`.

name: Publish ParadeDB

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

concurrency:
  group: publish-paradedb-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  publish-paradedb-container-image:
    name: Publish ParadeDB Container Image for PostgreSQL ${{ matrix.pg_version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pg_version: [15]

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v4

      - name: Retrieve GitHub Release Version
        id: version
        run: |
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "COMMIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Retrieve Current Date
        id: current_date
        run: echo "BUILD_DATE=$(date -u +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Configure Depot CLI
        uses: depot/setup-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # We also push to ECR, because we list on AWS Marketplace
      - name: Login to Amazon ECR
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 709825985650.dkr.ecr.us-east-1.amazonaws.com

      # The pg_version-tag Docker tag syntax is necessary for our K8s CloudNativePG operator
      - name: Build and Push Docker Image to Docker Hub
        uses: depot/build-push-action@v1
        with:
          context: .
          build-args: |
            PG_VERSION_MAJOR=${{ matrix.pg_version }}
            PG_BM25_VERSION=${{ steps.version.outputs.version }}
            PG_SEARCH_VERSION=${{ steps.version.outputs.version }}
            PG_SPARSE_VERSION=${{ steps.version.outputs.version }}
            PGVECTOR_VERSION=0.5.1
            PGAUDIT_VERSION=1.7.0
            PG_NET_VERSION=0.7.2
            PG_GRAPHQL_VERSION=1.3.0
            PG_JSONSCHEMA_VERSION=0.1.4
            PGNODEMX_VERSION=1.6
            PG_CRON_VERSION=1.6.2
            PG_IVM_VERSION=1.7
            PG_HASHIDS_VERSION=1.2.1
            PG_REPACK_VERSION=1.5.0
            PG_STAT_MONITOR_VERSION=2.0.3
            PG_HINT_PLAN_VERSION=1.5.1
            PG_ROARINGBITMAP_VERSION=0.5.4
            PGFACETING_VERSION=0.1.0
            PGTAP_VERSION=1.3.1
            POSTGIS_VERSION=3.4.1
            PGROUTING_VERSION=3.6.1
            PGSQL_HTTP_VERSION=1.6.0
            HYPOPG_VERSION=1.4.0
            RUM_VERSION=1.3.13
            AGE_VERSION=1.4.0
            CITUS_VERSION=12.1.1
            PGSODIUM_VERSION=3.1.9
            PGFINCORE_VERSION=1.3.1
            PG_PARTMAN_VERSION=5.0.0
            PG_JOBMON_VERSION=1.4.1
            PG_AUTO_FAILOVER_VERSION=2.1
            PG_SHOW_PLANS_VERSION=2.0.2
            SQLITE_FDW_VERSION=2.4.0
            PGDDL_VERSION=0.27
            MYSQL_FDW_VERSION=2.9.1
            TELEMETRY=true
            POSTHOG_API_KEY=${{ secrets.POSTHOG_API_KEY }}
            POSTHOG_HOST=${{ secrets.POSTHOG_HOST }}
            COMMIT_SHA=${{ steps.version.outputs.COMMIT_SHA }}
            BUILD_DATE=${{ steps.current_date.outputs.BUILD_DATE }}
          platforms: linux/amd64,linux/arm64
          file: docker/Dockerfile
          push: true
          project: ${{ secrets.DEPOT_PROJECT }}
          token: ${{ secrets.DEPOT_TOKEN }}
          tags: |
            paradedb/paradedb:latest
            paradedb/paradedb:${{ steps.version.outputs.tag }}
            paradedb/paradedb:${{ steps.version.outputs.version }}
            paradedb/paradedb:${{ matrix.pg_version }}-${{ steps.version.outputs.tag }}
            709825985650.dkr.ecr.us-east-1.amazonaws.com/paradedb/paradedb:latest
            709825985650.dkr.ecr.us-east-1.amazonaws.com/paradedb/paradedb:${{ steps.version.outputs.tag }}
            709825985650.dkr.ecr.us-east-1.amazonaws.com/paradedb/paradedb:${{ steps.version.outputs.version }}

  publish-paradedb-helm-chart:
    name: Publish ParadeDB Helm Chart for PostgreSQL ${{ matrix.pg_version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pg_version: [15]

    steps:
      - name: Retrieve GitHub Release Version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Trigger paradedb/helm-charts Release Workflow
        uses: benc-uk/workflow-dispatch@v1
        with:
          token: ${{ secrets.GHA_CREATE_RELEASE_PAT }}
          workflow: publish-helm-chart.yml
          repo: paradedb/helm-charts
          ref: main
          inputs: '{ "appVersion": "${{ steps.version.outputs.version }}" }'
